from fastapi import HTTPException
from sqlalchemy.orm import Session
from models import Utilisateur
from passlib.hash import bcrypt
from fastapi_jwt_auth import AuthJWT
from schemas import UtilisateurInscription, UtilisateurConnexion
from database import SessionLocal

# üîß Fonction pour obtenir une session de base de donn√©es
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ‚úÖ Inscription d‚Äôun nouvel utilisateur
VALID_ROLES = ['client', 'agent', 'service']  # R√¥les valides

def inscrire_utilisateur(utilisateur: UtilisateurInscription, db: Session):
    print(f"[INSCRIPTION] Tentative avec l'email : {utilisateur.email}")

    # V√©rification si l'email est d√©j√† utilis√©
    if db.query(Utilisateur).filter(Utilisateur.email == utilisateur.email).first():
        print("[ERREUR] Email d√©j√† utilis√©.")
        raise HTTPException(status_code=400, detail="L'adresse email est d√©j√† utilis√©e.")
    
    # V√©rification si le nom est d√©j√† utilis√©
    if db.query(Utilisateur).filter(Utilisateur.nom == utilisateur.nom).first():
        print("[ERREUR] Nom d√©j√† utilis√©.")
        raise HTTPException(status_code=400, detail="Le nom est d√©j√† utilis√©.")
    
    # Validation du r√¥le (assure-toi que le r√¥le est parmi ceux d√©finis)
    if utilisateur.role not in VALID_ROLES:
        print("[ERREUR] R√¥le invalide.")
        raise HTTPException(status_code=400, detail="R√¥le invalide. Les r√¥les valides sont : client, agent, service.")
    
    # Hachage du mot de passe
    mot_de_passe_hache = bcrypt.hash(utilisateur.mot_de_passe)
    print("[INFO] Mot de passe hach√©.")

    # Cr√©ation du nouvel utilisateur avec le r√¥le valid√©
    nouvel_utilisateur = Utilisateur(
        nom=utilisateur.nom,
        email=utilisateur.email,
        mot_de_passe=mot_de_passe_hache,
        role=utilisateur.role  # Enregistrement du r√¥le choisi
    )

    # Ajouter l'utilisateur √† la base de donn√©es
    db.add(nouvel_utilisateur)
    db.commit()
    db.refresh(nouvel_utilisateur)

    print("[SUCC√àS] Nouvel utilisateur inscrit avec succ√®s.")
    return nouvel_utilisateur

# ‚úÖ Connexion d‚Äôun utilisateur
def connexion_utilisateur(utilisateur: UtilisateurConnexion, Authorize: AuthJWT, db: Session):
    print(f"[CONNEXION] Tentative pour l'email : {utilisateur.email}")

    db_utilisateur = db.query(Utilisateur).filter(Utilisateur.email == utilisateur.email).first()

    if not db_utilisateur:
        print("[ERREUR] Utilisateur non trouv√©.")
        raise HTTPException(status_code=401, detail="Email ou mot de passe invalide.")
    
    if not bcrypt.verify(utilisateur.mot_de_passe, db_utilisateur.mot_de_passe):
        print("[ERREUR] Mot de passe incorrect.")
        raise HTTPException(status_code=401, detail="Email ou mot de passe invalide.")
    
    print("[INFO] Authentification r√©ussie, g√©n√©ration des tokens.")
    access_token = Authorize.create_access_token(subject=db_utilisateur.email)
    refresh_token = Authorize.create_refresh_token(subject=db_utilisateur.email)

    print("[SUCC√àS] Connexion valid√©e.")
    return {
        "message": "Connexion r√©ussie.",
        "token_acces": access_token,
        "token_actualisation": refresh_token,
        "nom": db_utilisateur.nom,
        "email": db_utilisateur.email,
        "role": db_utilisateur.role
    }

# üîÑ Renouvellement de token
def renouveler_token(Authorize: AuthJWT):
    try:
        Authorize.jwt_refresh_token_required()
    except Exception:
        print("[ERREUR] Token de rafra√Æchissement invalide ou expir√©.")
        raise HTTPException(status_code=401, detail="Token de rafra√Æchissement invalide ou expir√©.")
    
    utilisateur_courant = Authorize.get_jwt_subject()
    nouveau_token = Authorize.create_access_token(subject=utilisateur_courant)

    print("[INFO] Nouveau token d'acc√®s g√©n√©r√©.")
    return {
        "token_acces": nouveau_token,
        "message": "Nouveau token d'acc√®s g√©n√©r√© avec succ√®s."
    }
